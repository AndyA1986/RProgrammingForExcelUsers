#  return(sum(theta * observation))
#  prediction <- 0.0
#  for(i in 1:length(theta)) {
#    prediction <- prediction + (theta[i] * observation[i])
#  }
#  return(prediction)
#}
# for(k in 1:2){
#   m <- ncol(features)
#
#   for(j in 1:m) {
#     n <- nrow(features)
#     summation <- 0.0
#
#     for(i in 1:n) {
# #      prediction <- h.theta(theta, features[i,])
#       prediction <- sum(theta * features[i,])
#       residual <- prediction - y[i]
#       update.value <- residual * features[i, j]
#       summation <- summation + update.value
#     }
#
#     new.theta[j] <- theta[j] + (alpha * summation)
#   }
#
#   theta <- new.theta
#
# #  print(theta)
# }
#
# print(theta)
iterations <- 250
X <- features
for(k in 1:iterations) {
for(j in 1:ncol(X)) {
summation <- 0
for(i in 1:nrow(X)) {
residual <- sum(X[i,] * theta[j]) - y[i]
summation <- summation + (residual * X[i, j])
}
new.theta[j] <- theta[j] - (alpha / nrow(X) * summation)
}
theta <- new.theta
}
set.seed(1234)
x <- runif(1000, -5, 5)
y <- x + rnorm(1000) + 3
intercept <- rep(1, length(x))
lm.model <- lm(y ~ x)
summary(lm.model)
features <- data.frame(intercept = intercept, x = x)
theta <- rep(0, ncol(features))
names(theta) <- names(features)
theta
new.theta <- rep(0, ncol(features))
names(new.theta) <- names(features)
alpha <- 0.05
# Utility functon that calculates the prediction for an observation
# given the current state of the hypothesis function.
#h.theta <- function(theta, observation) {
#  return(sum(theta * observation))
#  prediction <- 0.0
#  for(i in 1:length(theta)) {
#    prediction <- prediction + (theta[i] * observation[i])
#  }
#  return(prediction)
#}
# for(k in 1:2){
#   m <- ncol(features)
#
#   for(j in 1:m) {
#     n <- nrow(features)
#     summation <- 0.0
#
#     for(i in 1:n) {
# #      prediction <- h.theta(theta, features[i,])
#       prediction <- sum(theta * features[i,])
#       residual <- prediction - y[i]
#       update.value <- residual * features[i, j]
#       summation <- summation + update.value
#     }
#
#     new.theta[j] <- theta[j] + (alpha * summation)
#   }
#
#   theta <- new.theta
#
# #  print(theta)
# }
#
# print(theta)
iterations <- 300
X <- features
for(k in 1:iterations) {
for(j in 1:ncol(X)) {
summation <- 0
for(i in 1:nrow(X)) {
residual <- sum(X[i,] * theta[j]) - y[i]
summation <- summation + (residual * X[i, j])
}
new.theta[j] <- theta[j] - (alpha / nrow(X) * summation)
}
theta <- new.theta
}
set.seed(1234)
x <- runif(1000, -5, 5)
y <- x + rnorm(1000) + 3
intercept <- rep(1, length(x))
lm.model <- lm(y ~ x)
summary(lm.model)
features <- data.frame(intercept = intercept, x = x)
theta <- rep(0, ncol(features))
names(theta) <- names(features)
theta
new.theta <- rep(0, ncol(features))
names(new.theta) <- names(features)
alpha <- 0.05
# Utility functon that calculates the prediction for an observation
# given the current state of the hypothesis function.
#h.theta <- function(theta, observation) {
#  return(sum(theta * observation))
#  prediction <- 0.0
#  for(i in 1:length(theta)) {
#    prediction <- prediction + (theta[i] * observation[i])
#  }
#  return(prediction)
#}
# for(k in 1:2){
#   m <- ncol(features)
#
#   for(j in 1:m) {
#     n <- nrow(features)
#     summation <- 0.0
#
#     for(i in 1:n) {
# #      prediction <- h.theta(theta, features[i,])
#       prediction <- sum(theta * features[i,])
#       residual <- prediction - y[i]
#       update.value <- residual * features[i, j]
#       summation <- summation + update.value
#     }
#
#     new.theta[j] <- theta[j] + (alpha * summation)
#   }
#
#   theta <- new.theta
#
# #  print(theta)
# }
#
# print(theta)
iterations <- 500
X <- features
for(k in 1:iterations) {
for(j in 1:ncol(X)) {
summation <- 0
for(i in 1:nrow(X)) {
residual <- sum(X[i,] * theta[j]) - y[i]
summation <- summation + (residual * X[i, j])
}
new.theta[j] <- theta[j] - (alpha / nrow(X) * summation)
}
theta <- new.theta
}
data(iria)
data(iris)
install.packages(c("lmtest", "mgcv", "nlme"))
data("iris")
library(GGally)
ggpairs(iris)
remove.packages("tibble")
library(GGally)
remove.packages("GGally")
remove.packages("plotly")
install.pacakges("GGally")
install.packages("GGally")
library(GGally)
install.packages(tibble)
install.packages("tibble")
library(GGally)
data("iris")
ggpairs(iris)
debugSource('~/Dropbox/AmsterdamBootcamp/GradientDescentExample.R', echo=TRUE)
debugSource('~/Dropbox/AmsterdamBootcamp/GradientDescentExample.R', echo=TRUE)
setwd("~/Dropbox/YouTube/RProgrammingForExcel/repo")
titanic_train <- read.csv("titanic_train.csv")
str(titanic_train)
titanic_train$Survived <- as.factor(titanic_train$Survived)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
geom_histogram(binwidth = 5)
library(ggplot2)
titanic_train$Survived <- as.factor(titanic_train$Survived)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
geom_histogram(binwidth = 5)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
facet_wrap(Sex ~ Pclass) +
geom_histogram(binwidth = 5)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
scale_y_continuous(labels = percent)
library(scale)
library(scales)
ggplot(titanic_train, aes(x = Fare, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
scale_y_continuous(labels = percent)
#
# Copyright 2017 Dave Langer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This R source code file corresponds to video 6 of the YouTube series
# "R Programming for Excel Users" located at the following URL:
#      https://youtu.be/<Need Link>
#
# Load the data and take a look at the structure
# NOTE - Be sure to set your working directory!
titanic_train <- read.csv("titanic_train.csv")
str(titanic_train)
# Subset the data for the Age variable (i.e., the 6th column)
titanic_train[7, 6]
titanic_train[1:10, 6]
# Subset the data for the Age, SibSp, and Parch variables
# (i.e., the 6th, 7th, and 8th columns)
titanic_train[2:25, 6:8]
# Perform vector-based summation first 10 Age values
sum(titanic_train[1:10, 6], na.rm = TRUE)
# Perform vector-based summation on all Age values,
# the second parameter is required to ignore missing values!
sum(titanic_train$Age, na.rm = TRUE)
# Add a new column for the size of the family using a
# vectorized calculation
titanic_train$FamilySize <- 1 + titanic_train$SibSp + titanic_train$Parch
View(titanic_train)
# Add a new column to the data frame
titanic_train$AgeMissing <- ""
View(titanic_train)
# Update the new column to reflect reality
titanic_train$AgeMissing <- ifelse(is.na(titanic_train$Age),
"Y",
"N")
View(titanic_train)
# Start investigating the nature of the Age column
summary(titanic_train$Age)
# More summary statistics for Age column
sd(titanic_train$Age, na.rm = TRUE)
median(titanic_train$Age, na.rm = TRUE)
var(titanic_train$Age, na.rm = TRUE)
sum(titanic_train$Age, na.rm = TRUE)
length(titanic_train$Age)
AgeTemp <- titanic_train$Age[!is.na(titanic_train$Age)]
length(AgeTemp)
# Slice Age data by Gender
FemaleAge <- titanic_train$Age[titanic_train$Sex == "female"]
summary(FemaleAge)
sd(FemaleAge, na.rm = TRUE)
MaleAge <- titanic_train$Age[titanic_train$Sex == "male"]
summary(MaleAge)
sd(MaleAge, na.rm = TRUE)
# Slice entire data frame by Sex
female_train <- titanic_train[titanic_train$Sex == "female",]
View(female_train)
male_train <- titanic_train[titanic_train$Sex == "male",]
View(male_train)
# Further slice data frame by Pclass of 1
female_1st_train <- female_train[female_train$Pclass == 1,]
View(female_1st_train)
summary(female_1st_train$Age)
male_1st_train <- male_train[male_train$Pclass == 1,]
View(male_1st_train)
summary(male_1st_train$Age)
# Can combine in a single step
female_1st_train <- titanic_train[(titanic_train$Sex == "female" & titanic_train$Pclass == 1),]
male_1st_train <- titanic_train[titanic_train$Sex == "male" &
titanic_train$Pclass == 1,]
View(titanic_train)
names(train)
names(titanic_train)
my_subset_1 <- train[, c(2, 3, 4, 5, 6, 7, 8, 10, 13, 14)]
View(my_subset_1)
names(titanic_train)
my_subset_1 <- titanic_train[, c(2, 3, 4, 5, 6, 7, 8, 10, 13, 14)]
View(my_subset_1)
my_rows <- c(1:50, 67, 69, 84, 100:891)
my_cols <- c(2:8, 10, 13:14)
my_subset_3 <- titanic_train[my_rows, my_cols]
View(my_subset_3)
features <- names(titanic_train)
features <- features[-c(1, 9, 11, 12)]
features
features <- names(titanic_train)
features <- features[-c(1, 9, 11, 12)]
features
my_subset_5 <- titanic_train[, features]
View(my_subset_5)
features <- names(titanic_train)[-c(1, 9, 11, 12)]
features
my_rows <- -c(51:55, 68, 70:83, 85:99)
my_features <- names(titanic_train)[-c(1, 9, 11, 12)]
my_features
my_rows <- c(51:55, 68, 70:83, 85:99)
my_features <- names(titanic_train)[-c(1, 9, 11, 12)]
my_features
my_subset_6 <- titanic_train[my_rows, my_features]
View(my_subset_6)
my_subset_6 <- titanic_train[-my_rows, my_features]
View(my_subset_6)
my_rows <- c(51:66, 68, 70:83, 85:99)
my_features <- names(titanic_train)[-c(1, 9, 11, 12)]
my_features
my_subset_6 <- titanic_train[-my_rows, my_features]
View(my_subset_6)
?factor
titanic_train$Sex <- as.factor(titanic_train$Sex)
titanic_train$Pclass <- as.factor(titanic_train$Pclass)
str(titanic_train)
library(ggplot2)
ggplot(female_1st_train, aes(x = Age)) +
geom_histogram()
ggplot(female_1st_train, aes(x = Age)) +
geom_histogram(binwidth = 5)
table(female_1st_train$Age)
ggplot(female_1st_train, aes(x = Age)) +
theme_bw() +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Age Distribution")
ggplot(female_train, aes(x = Age)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Age Distribution")
ggplot(female_train, aes(x = Age, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Age Distribution")
female_train$Survived <- as.factor(female_train$Survived)
ggplot(female_train, aes(x = Age, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Age Distribution by Pclass")
ggplot(female_train, aes(x = Age)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Age Distribution by Pclass")
ggplot(female_train, aes(x = Age, fill = Survived)) +
theme_bw() +
facet_wrap(~ Pclass) +
geom_histogram(binwidth = 5) +
labs(y = "Passenger Count",
x = "Passenger Age",
title = "Female 1st Class Survival Rates by Pclass and Age")
#
# Copyright 2017 Dave Langer
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
#
# This R source code file corresponds to video 6 of the YouTube series
# "R Programming for Excel Users" located at the following URL:
#      https://youtu.be/<Need Link>
#
# Load the data and take a look at the structure
# NOTE - Be sure to set your working directory!
titanic_train <- read.csv("titanic_train.csv")
str(titanic_train)
# Subset the data for the Age variable (i.e., the 6th column)
titanic_train[7, 6]
titanic_train[1:10, 6]
# Subset the data for the Age, SibSp, and Parch variables
# (i.e., the 6th, 7th, and 8th columns)
titanic_train[2:25, 6:8]
# Perform vector-based summation first 10 Age values
sum(titanic_train[1:10, 6], na.rm = TRUE)
# Perform vector-based summation on all Age values,
# the second parameter is required to ignore missing values!
sum(titanic_train$Age, na.rm = TRUE)
# Add a new column for the size of the family using a
# vectorized calculation
titanic_train$FamilySize <- 1 + titanic_train$SibSp + titanic_train$Parch
View(titanic_train)
# Add a new column to the data frame
titanic_train$AgeMissing <- ""
View(titanic_train)
# Update the new column to reflect reality
titanic_train$AgeMissing <- ifelse(is.na(titanic_train$Age),
"Y",
"N")
View(titanic_train)
# Start investigating the nature of the Age column
summary(titanic_train$Age)
# More summary statistics for Age column
sd(titanic_train$Age, na.rm = TRUE)
median(titanic_train$Age, na.rm = TRUE)
var(titanic_train$Age, na.rm = TRUE)
sum(titanic_train$Age, na.rm = TRUE)
length(titanic_train$Age)
AgeTemp <- titanic_train$Age[!is.na(titanic_train$Age)]
length(AgeTemp)
# Slice Age data by Gender
FemaleAge <- titanic_train$Age[titanic_train$Sex == "female"]
summary(FemaleAge)
sd(FemaleAge, na.rm = TRUE)
MaleAge <- titanic_train$Age[titanic_train$Sex == "male"]
summary(MaleAge)
sd(MaleAge, na.rm = TRUE)
# Slice entire data frame by Sex
female_train <- titanic_train[titanic_train$Sex == "female",]
View(female_train)
male_train <- titanic_train[titanic_train$Sex == "male",]
View(male_train)
# Further slice data frame by Pclass of 1
female_1st_train <- female_train[female_train$Pclass == 1,]
View(female_1st_train)
summary(female_1st_train$Age)
male_1st_train <- male_train[male_train$Pclass == 1,]
View(male_1st_train)
summary(male_1st_train$Age)
# Can combine in a single step
female_1st_train <- titanic_train[(titanic_train$Sex == "female" & titanic_train$Pclass == 1),]
male_1st_train <- titanic_train[titanic_train$Sex == "male" &
titanic_train$Pclass == 1,]
View(titanic_train)
?names
names(titanic_train)
?c
my_subset_2 <- titanic_train[, c(2: 5:8, 10, 13:14)]
View(my_subset_2)
my_subset_2 <- titanic_train[, c(2:3, 5:8, 10, 13:14)]
View(my_subset_2)
rm(my_subset_2)
View(male_1st_train)
View(titanic_train)
?names
names(titanic_train)
?c
c(2, 3, 5, 6, 7, 8, 10, 13, 14)
my_subset_1 <- titanic_train[, c(2, 3, 5, 6, 7, 8, 10, 13, 14)]
View(my_subset_1)
c(2:3, 5:8, 10, 13:14)
my_subset_2 <- titanic_train[, c(2:3, 5:8, 10, 13:14)]
View(my_subset_2)
my_rows <- c(1:50, 67, 69, 84, 100:891)
my_rows
my_features <- c(2:3, 5:8, 10, 13:14)
my_subset_3 <- titanic_train[my_rows, my_features]
View(my_subset_3)
my_features <- c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "FamilySize", "AgeMissing")
my_features
my_subset_4 <- titanic_train[, features]
View(my_subset_4)
my_features <- c("Survived", "Pclass", "Sex", "Age", "SibSp", "Parch", "Fare", "FamilySize", "AgeMissing")
my_subset_4 <- titanic_train[, features]
View(my_subset_4)
my_subset_4 <- titanic_train[, my_features]
View(my_subset_4)
my_features <- names(titanic_train)
my_features
my_features <- my_features[-c(1, 4, 9, 11, 12)]
my_features
my_subset_5 <- titanic_train[, my_features]
View(my_subset_5)
my_features <- names(titanic_train)[-c(1, 4, 9, 11, 12)]
my_features
my_rows
my_rows <- c(51:66, 68, 70:83, 85:99)
my_rows
my_subset_6 <- titanic_train[-my_rows, my_features]
View(my_subset_6)
